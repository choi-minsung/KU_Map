
type NoteData {
  id: ID!
  name: String!
  description: String
  image: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelNoteDataConnection {
  items: [NoteData]!
  nextToken: String
}

input ModelNoteDataFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  image: ModelStringInput
  and: [ModelNoteDataFilterInput]
  or: [ModelNoteDataFilterInput]
  not: ModelNoteDataFilterInput
}

type Query {
  getNoteData(id: ID!): NoteData
  listNoteData(filter: ModelNoteDataFilterInput, limit: Int, nextToken: String): ModelNoteDataConnection
}

input ModelNoteDataConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  image: ModelStringInput
  and: [ModelNoteDataConditionInput]
  or: [ModelNoteDataConditionInput]
  not: ModelNoteDataConditionInput
}

input CreateNoteDataInput {
  id: ID
  name: String!
  description: String
  image: String
}

input UpdateNoteDataInput {
  id: ID!
  name: String
  description: String
  image: String
}

input DeleteNoteDataInput {
  id: ID!
}

type Mutation {
  createNoteData(input: CreateNoteDataInput!, condition: ModelNoteDataConditionInput): NoteData
  updateNoteData(input: UpdateNoteDataInput!, condition: ModelNoteDataConditionInput): NoteData
  deleteNoteData(input: DeleteNoteDataInput!, condition: ModelNoteDataConditionInput): NoteData
}

type Subscription {
  onCreateNoteData(owner: String): NoteData @aws_subscribe(mutations: ["createNoteData"])
  onUpdateNoteData(owner: String): NoteData @aws_subscribe(mutations: ["updateNoteData"])
  onDeleteNoteData(owner: String): NoteData @aws_subscribe(mutations: ["deleteNoteData"])
}

